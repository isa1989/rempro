# Generated by Django 5.0.6 on 2024-08-16 11:12

import buildings.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('whatsapp_link', models.URLField(blank=True, null=True)),
                ('telegram', models.URLField(blank=True, null=True)),
                ('camera_url', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Filial',
                'verbose_name_plural': 'Filial',
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('outcome_date', models.DateField()),
                ('outcome_document', models.FileField(blank=True, null=True, upload_to='documents/')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Xərclər',
                'verbose_name_plural': 'Xərclər',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the service', max_length=255, verbose_name='Service Name')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, help_text='Enter the price of the service', max_digits=10, verbose_name='Price')),
                ('invoice_day', models.IntegerField(help_text='Enter the day of the month when the invoice is issued', validators=[buildings.models.validate_day], verbose_name='Invoice Day')),
            ],
            options={
                'verbose_name': 'Xidmətlər',
                'verbose_name_plural': 'Xidmətlər',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('commandant', models.BooleanField(default=False)),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', related_query_name='user', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions_set', related_query_name='user', to='auth.permission')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='buildings.branch')),
            ],
            options={
                'verbose_name': 'İstifadəçilər',
                'verbose_name_plural': 'İstifadəçilər',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buildings', to='buildings.branch')),
            ],
            options={
                'verbose_name': 'Binalar',
                'verbose_name_plural': 'Binalar',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='buildings.building')),
            ],
            options={
                'verbose_name': 'Bloklar',
                'verbose_name_plural': 'Bloklar',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount of the payment', max_digits=10, verbose_name='Amount')),
                ('date', models.DateField(help_text='The date of the payment', verbose_name='Date')),
                ('user', models.ForeignKey(help_text='The user who made the payment', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='buildings.service')),
            ],
            options={
                'verbose_name': 'Ödəniş',
                'verbose_name_plural': 'Ödəniş',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Flat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('square_metres', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_rent', models.BooleanField(default=False)),
                ('tenant_document', models.FileField(blank=True, null=True, upload_to='documents/')),
                ('owner_document', models.FileField(upload_to='documents/')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='buildings.building')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='buildings.section')),
                ('services', models.ManyToManyField(blank=True, related_name='flats', to='buildings.service', verbose_name='Services')),
            ],
            options={
                'verbose_name': 'Mənzillər',
                'verbose_name_plural': 'Mənzillər',
                'ordering': ['id'],
            },
        ),
    ]
